import numpy as np
from scipy.signal import lfilter, butter
from scipy.stats import zscore
import mne

FS = 75
A = 1
bl, al = butter(A, 1, btype='high', analog=True)
bh, ah = butter(A, 32, btype='low', analog=True)


def reference(raw):
    return raw['ch1'] - (raw['ch2']-raw['ch3'])


def noise_zscore(sig):
    n = 25
    b = [1/n]*n
    a = 1
    denoise = lfilter(b, a, sig)
    z_scores = np.abs(zscore(denoise))
    return [denoise[n] for n in range(len(denoise)) if z_scores[n] < 4]


def low_high_pass(sig):
    info = mne.create_info(1, 75, 'eeg')
    data = mne.io.RawArray([sig], info)
    filt_raw = data.copy().filter(l_freq=1, h_freq=32,)
    return filt_raw.to_data_frame(scalings=dict(eeg=1))['0']


def preprocess(data):
    return noise_zscore(reference(data))


if __name__ == "__main__":
    from math import ceil
    import pandas as pd
    import matplotlib.pyplot as plt
    # test = pd.DataFrame({"time": 38.037585973739624, "ch1": [-0.013875, -0.013, 0.00775, 0.01025, 0.00825, -0.01075, -0.01375, 0.000625, 0.001125, -0.012125, 0.00775, -0.0065, -0.01, 0.0085, -0.012625, 0.0095, 0.003375, -0.0145, 0.01025, -0.0035, -0.012, 0.008375, -0.011, -0.013375, -0.002625, 0.012125, 0.011875, -0.004375, -0.0125, -0.009625, 0.011875, 0.006125, 0.00325, -0.0145, 0.003625, 0.007375, 0.010125, -0.01125, -0.012625, -0.002875, 0.011875, 0.01175, -0.0045, -0.01275, -0.009875, 0.010625, 0.006125, 0.0035, -0.015, 0.003375, 0.007375, 0.010125, -0.011375, -0.012625, -0.00325, 0.0115, 0.01225, -0.003875, -0.01225, -0.010125, 0.01125, 0.006, 0.00375, -0.01425, -0.014125, -0.01225, -0.009875, 0.010125, 0.011125, 0.012, 0.011625, -0.003625, -0.00775, 0.008875, 0.011625, 0.0065, -0.01275, -0.000125, 0.011375, 0.01175, 0.010125, 0.009375, -0.013, -0.013125, -0.013625, 0.00325, 0.01075, -0.00525, -0.010875, -0.007375, 0.0095, 0.011875, 0.00025, -0.002875, -0.012375, 0.008875, 0.011, 0.007125, -0.013, -0.00075, 0.003, 0.010375, 0.010375, 0.0095, 0.007125, 0.004125, -0.013125, 0.001625, 0.0095, 0.010375, -0.01, -0.01175, -0.0145, -0.00025, 0.0115, -0.002625, -0.007625, -0.010875, 0.010875, 0.011375, 0.004, 0.00125, -0.013, 0.00575, 0.009, 0.010375, -0.01275, -0.004875, -0.000875, 0.012375, -0.003125, -0.00725, -0.011125, 0.0095, 0.0115, 0.00375, 0.001375, -0.013875, 0.006125, 0.00975, 0.008875, -0.011125, -0.0045, 0.01075, 0.01225, 0.011375, -0.00775, -0.010625, -0.012, -0.0135], "ch2": [0.005375, 0.008625, -0.006375, -0.00825, -0.003125, 0.011125, 0.009875, -0.008625, 0.003625, 0.007, -0.008, 0.012125, -0.004375, -0.0015, 0.010125, -0.010375, 0.0105, 0.00575, -0.009, 0.011875, 0.001375, -0.004875, 0.011875, 0.008125, -0.00275, -0.00825, -0.000625, 0.011, 0.008375, -0.0035, -0.009625, -0.000125, 0.011375, 0.00775, -0.00075, -0.009375, -0.001625, 0.01075, 0.008625, -0.0025, -0.008375, -0.000625, 0.01125, 0.00825, -0.002375, -0.01, -0.0005, 0.0105, 0.008625, -0.000875, -0.009375, -0.00125, 0.011125, 0.008375, -0.00075, -0.008875, -0.001125, 0.01075, 0.0085, -0.00175, -0.0095, -0.000375, 0.010875, 0.011, 0.008625, 0.004875, 0.001125, -0.005375, -0.00925, -0.007875, 0.00075, 0.011,
    #                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       0.012625, -0.00425, -0.006125, 0.005375, 0.009625, -0.00525, -0.0095, -0.007125, -0.002625, 0.003375, 0.01075, 0.010625, 0.00725, -0.00375, -0.00625, 0.0055, 0.01225, 0.006875, -0.007, -0.009125, 0.00025, 0.011875, 0.00975, -0.00425, -0.005625, 0.006125, 0.012375, 0.00425, -0.004625, -0.009625, -0.005, -0.0005, 0.00325, 0.009625, 0.010875, 0.00475, -0.00775, -0.001625, 0.008625, 0.0125, 0.00875, -0.000375, -0.008, 0.003875, 0.012375, 0.00375, -0.00825, -0.008375, 0.000375, 0.012, 0.01175, 0.00225, -0.009, -0.000875, 0.01225, 0.008125, -0.006875, -0.004625, 0.008375, 0.012375, 0.005625, -0.00375, -0.007875, 0.00125, 0.012, 0.009625, -0.0045, -0.0065, 0.004375, 0.012625, 0.004, -0.007, -0.003875, -0.000625, 0.0035, 0.008875, 0.011375, 0.0105], "ch3": [0.00375, 0.003, 0.006, 0.005, -0.00175, -0.004625, 0.0005, 0.004375, -0.005125, 0.005, 0.0005, -0.00225, 0.00575, -0.004625, 0.001625, 0.002125, -0.003875, 0.00575, 0.00075, -0.00325, 0.00675, -0.003375, -0.00275, 0.002375, 0.00625, 0.001375, -0.00375, -0.0035, 0.001375, 0.006375, 0.00175, -0.004625, -0.003375, 0.002375, 0.006375, 0.002, -0.003875, -0.003625, 0.0015, 0.0065, 0.001625, -0.0045, -0.003, 0.002125, 0.006375, 0.002, -0.004125, -0.003625, 0.00175, 0.00625, 0.001875, -0.004375, -0.003, 0.001875, 0.006625, 0.002375, -0.004, -0.003375, 0.001875, 0.0065, 0.001875, -0.0045, -0.003, -0.0035, -0.001625, 0.00025, 0.003125, 0.006125, 0.005625, 0.002875, -0.00175, -0.00475, -0.00075, 0.006125, 0.00275, -0.004875, 0.000375, 0.00625, 0.004375, 0.002625, 0.00025, -0.003875, -0.004875, -0.00275, 0.0005, 0.00625, 0.0015, -0.004875, -0.002125, 0.003375, 0.006125, 0.0025, -0.0025, -0.004625, 0.000875, 0.00625, 0.001375, -0.00475, -0.00125, 0.005125, 0.00625, 0.0045, 0.002, -0.000375, -0.00325, -0.005, -0.002625, 0.006, 0.003625, -0.000625, -0.00475, -0.003125, 0.000625, 0.0065, 0.00225, -0.004625, -0.002125, 0.00575, 0.00575, 0.00225, -0.002375, -0.0045, -0.00125, 0.006125, 0.003875, -0.003, -0.003625, 0.002625, 0.006, 0.000125, -0.004875, -0.002125, 0.001, 0.006375, 0.003, -0.002375, -0.004125, 0.001125, 0.006375, 0.001875, -0.004625, -0.001625, 0.005875, 0.00375, 0.001875, -0.00075, -0.003375, -0.004375, -0.00475, -0.002625]})
    test = pd.read_csv("raw.csv")
    EPOCHL = 75  # samples
    another_test = pd.DataFrame({"time": [], "0": []})
    another_test['time'] = test['time']
    num_epochs = ceil(len(test['ch1'])/(EPOCHL))
    for e in range(num_epochs):
        pre = preprocess(test.iloc[EPOCHL*e:EPOCHL*(e+1)])
        another_test['0'][EPOCHL*e:EPOCHL*(e+1)] = pre
    PADDING = 10
    BLINK_TIMES = [3.256, 27.493, 40.367, 49.954, 54.705, 59.932, 62.02, 82.876, 86.506, 93.762, 108.902,
                   113.398, 119.557, 123.655, 125.266, 127.693, 129.375, 130.225, 131.258, 139.9, 152.801, 170.144]
    another_test["blink"] = 0
    for blink in BLINK_TIMES:
        loc = another_test['time'].sub(blink).abs().idxmin()
        print(loc)
        another_test['blink'][loc-PADDING:loc+PADDING] = 1
    print(another_test)
    another_test.to_csv("preprocessed.csv")
